package udacity.pedrovarela.com.mypopularmovies.ui;import android.app.Activity;import android.app.Fragment;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.preference.PreferenceManager;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.GridView;import android.widget.ListView;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.reflect.Type;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.List;import udacity.pedrovarela.com.mypopularmovies.R;import udacity.pedrovarela.com.mypopularmovies.adapter.MoviesAdapter;import udacity.pedrovarela.com.mypopularmovies.core.Movie;import udacity.pedrovarela.com.mypopularmovies.core.SearchResult;import udacity.pedrovarela.com.mypopularmovies.listener.MovieItemListener;/** * A placeholder fragment containing a simple view. */public class MainFragment extends Fragment {    private static final String STATE_ACTIVATED_POSITION = "activated_position";    private static MovieItemListener sDummyCallbacks = new MovieItemListener() {        @Override        public void onMovieSelected(Movie movie) {        }    };    private final String TAG = MainFragment.class.getName();    private final Type typeSearchResult = new TypeToken<SearchResult>() {    }.getType();    public MovieItemListener mMovieItemListener;    protected MoviesAdapter moviesAdapter;    GridView gridViewPopularMovies;    /**     * The current activated item position. Only used on tablets.     */    private int mActivatedPosition = GridView.INVALID_POSITION;    public MainFragment() {    }    /**     * @param savedInstanceState     */    @Override    public void onCreate(Bundle savedInstanceState) {        setHasOptionsMenu(false);        super.onCreate(savedInstanceState);    }    /**     * @param inflater     * @param container     * @param savedInstanceState     * @return     */    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_main, container, false);    }    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        // Activities containing this fragment must implement its callbacks.        if (!(activity instanceof MovieItemListener)) {            throw new IllegalStateException("Activity must implement fragment's callbacks.");        }        mMovieItemListener = (MovieItemListener) activity;    }    @Override    public void onDetach() {        super.onDetach();        mMovieItemListener = sDummyCallbacks;    }    /**     * On view created method     *     * @param view               View created     * @param savedInstanceState Saved instance state     */    @Override    public void onViewCreated(View view, Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        gridViewPopularMovies = (GridView) view.findViewById(R.id.gridViewPopularMovies);        List<Movie> movieList = new ArrayList<>();        moviesAdapter = new MoviesAdapter(getActivity(), movieList);        gridViewPopularMovies.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                mMovieItemListener.onMovieSelected((Movie) parent.getItemAtPosition(position));            }        });        gridViewPopularMovies.setAdapter(moviesAdapter);        setActivateOnItemClick(true);        fetchMovies();        if(savedInstanceState!=null && savedInstanceState.containsKey(STATE_ACTIVATED_POSITION)){            setActivatedPosition(savedInstanceState.getInt(STATE_ACTIVATED_POSITION));        }    }    @Override    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        outState.putInt(STATE_ACTIVATED_POSITION,mActivatedPosition);    }    /**     * On start method android life cycle     */    @Override    public void onStart() {        super.onStart();        fetchMovies();    }    /**     * Method to launch the asyncTask to fetch movies     */    private void fetchMovies() {        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(getActivity());        String sortBy = sharedPref.getString(getString(R.string.pref_sort_key), getString(R.string.pref_default_sorting));        new FetchMoviesTask().execute(sortBy);    }    public void setActivateOnItemClick(boolean activateOnItemClick) {        // When setting CHOICE_MODE_SINGLE, GridView will automatically        // give items the 'activated' state when touched.        gridViewPopularMovies.setChoiceMode(activateOnItemClick                ? GridView.CHOICE_MODE_SINGLE                : GridView.CHOICE_MODE_NONE);    }    private void setActivatedPosition(int position) {        if (position == GridView.INVALID_POSITION) {            gridViewPopularMovies.setItemChecked(mActivatedPosition, false);        } else {            gridViewPopularMovies.setItemChecked(position, true);        }        mActivatedPosition = position;    }    /**     * AsyncTask class to fetch movies from database     */    private class FetchMoviesTask extends AsyncTask<String, Void, SearchResult> {        @Override        protected void onPreExecute() {            super.onPreExecute();            gridViewPopularMovies.setSelected(false);            gridViewPopularMovies.setSelection(GridView.INVALID_POSITION);        }        @Override        protected SearchResult doInBackground(String... params) {            HttpURLConnection urlConnection = null;            BufferedReader reader = null;            String moviesJsonString = null;            SearchResult searchResult;            String base_url = "http://api.themoviedb.org/3/discover/movie";            try {                Uri builtUri = Uri.parse(base_url).buildUpon().appendQueryParameter("api_key", "9207151e0751c013d2d36ff02d6cab7a")                        .appendQueryParameter("sort_by", params[0]).build();                URL url = new URL(builtUri.toString());                urlConnection = (HttpURLConnection) url.openConnection();                urlConnection.setRequestMethod("GET");                urlConnection.connect();                // Read the input stream into a String                InputStream inputStream = urlConnection.getInputStream();                StringBuilder buffer = new StringBuilder();                if (inputStream == null) {                    return null;                }                reader = new BufferedReader(new InputStreamReader(inputStream));                String line;                while ((line = reader.readLine()) != null) {                    buffer.append(line).append("\n");                }                if (buffer.length() == 0) {                    return null;                }                moviesJsonString = buffer.toString();            } catch (IOException e) {                Log.e(TAG, "Error ", e);                return null;            } finally {                if (urlConnection != null) {                    urlConnection.disconnect();                }                if (reader != null) {                    try {                        reader.close();                    } catch (final IOException e) {                        Log.e(TAG, "Error closing stream", e);                    }                }            }            Gson gson = new Gson();            searchResult = gson.fromJson(moviesJsonString, typeSearchResult);            return searchResult;        }        /**         * @param searchResult Search result         */        @Override        protected void onPostExecute(SearchResult searchResult) {            moviesAdapter.clear();            moviesAdapter.addAll(searchResult.results);        }    }}