package udacity.pedrovarela.com.mypopularmovies.ui;import android.app.Fragment;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.preference.PreferenceManager;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.reflect.Type;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.List;import udacity.pedrovarela.com.mypopularmovies.R;import udacity.pedrovarela.com.mypopularmovies.adapter.MoviesAdapter;import udacity.pedrovarela.com.mypopularmovies.core.Movie;import udacity.pedrovarela.com.mypopularmovies.core.SearchResult;import udacity.pedrovarela.com.mypopularmovies.listener.MovieItemListener;/** * A placeholder fragment containing a simple view. */public class MainActivityFragment extends Fragment {    private final String TAG = MainActivityFragment.class.getName();    private final Type typeSearchResult = new TypeToken<SearchResult>() {    }.getType();    private AbsListView gridViewPopularMovies;    private MoviesAdapter moviesAdapter;    private List<Movie> movieList;    public MainActivityFragment() {    }    @Override    public void onCreate(Bundle savedInstanceState) {        setHasOptionsMenu(false);        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_main, container, false);    }    /**     * On view created method     *     * @param view               View created     * @param savedInstanceState Saved instance state     */    @Override    public void onViewCreated(View view, Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        gridViewPopularMovies = (AbsListView) view.findViewById(R.id.gridViewPopularMovies);        movieList = new ArrayList<>();        moviesAdapter = new MoviesAdapter(getActivity(), movieList, new MovieItemListener() {            @Override            public void onMovieSelected(Movie movie) {                showMovieDetail(movie);            }        });        gridViewPopularMovies.setAdapter(moviesAdapter);        //CAN'T BELIEVE THIS CODE DOESN'T WORK//        gridViewPopularMovies.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {//            @Override//            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {//                showMovieDetail((Movie) parent.getItemAtPosition(position));//            }////            @Override//            public void onNothingSelected(AdapterView<?> parent) {////            }//        });////        gridViewPopularMovies.setOnItemClickListener(new AdapterView.OnItemClickListener() {//            @Override//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {//                showMovieDetail((Movie) parent.getItemAtPosition(position));//            }//        });        fetchMovies();    }    /**     * On start method android life cycle     */    @Override    public void onStart() {        super.onStart();        fetchMovies();    }    /**     * Method to launch the asyncTask to fetch movies     */    private void fetchMovies() {        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(getActivity());        String sortBy = sharedPref.getString(getString(R.string.pref_sort_key), getString(R.string.pref_default_sorting));        new FetchMoviesTask().execute(sortBy);    }    private void showMovieDetail(Movie movie) {        Intent intent = new Intent(getActivity(), DetailActivity.class);        intent.putExtra("movieInfo", movie);        startActivity(intent);    }    /**     * AsyncTask class to fetch movies from database     */    private class FetchMoviesTask extends AsyncTask<String, Void, SearchResult> {        @Override        protected SearchResult doInBackground(String... params) {            HttpURLConnection urlConnection = null;            BufferedReader reader = null;            String moviesJsonString = null;            SearchResult searchResult;            String base_url = "http://api.themoviedb.org/3/discover/movie";            try {                Uri builtUri = Uri.parse(base_url).buildUpon().appendQueryParameter("api_key", "9207151e0751c013d2d36ff02d6cab7a")                        .appendQueryParameter("sort_by", params[0]).build();                URL url = new URL(builtUri.toString());                urlConnection = (HttpURLConnection) url.openConnection();                urlConnection.setRequestMethod("GET");                urlConnection.connect();                // Read the input stream into a String                InputStream inputStream = urlConnection.getInputStream();                StringBuilder buffer = new StringBuilder();                if (inputStream == null) {                    return null;                }                reader = new BufferedReader(new InputStreamReader(inputStream));                String line;                while ((line = reader.readLine()) != null) {                    buffer.append(line).append("\n");                }                if (buffer.length() == 0) {                    return null;                }                moviesJsonString = buffer.toString();            } catch (IOException e) {                Log.e(TAG, "Error ", e);                return null;            } finally {                if (urlConnection != null) {                    urlConnection.disconnect();                }                if (reader != null) {                    try {                        reader.close();                    } catch (final IOException e) {                        Log.e(TAG, "Error closing stream", e);                    }                }            }            Gson gson = new Gson();            searchResult = gson.fromJson(moviesJsonString, typeSearchResult);            return searchResult;        }        /**         * @param searchResult Search result         */        @Override        protected void onPostExecute(SearchResult searchResult) {            moviesAdapter.clear();            moviesAdapter.addAll(searchResult.results);        }    }}